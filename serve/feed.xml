<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bamboo College</title>
    <description>Cool College for Advanced Technologies</description>
    <link>https://zhengb087.github.io/bamboo-college/</link>
    <atom:link href="https://zhengb087.github.io/bamboo-college/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>2016-07-19 12:07:36 +0800</pubDate>
    <lastBuildDate>2016-07-19 12:07:36 +0800</lastBuildDate>
    <generator>Jekyll v</generator>
    
      <item>
        <title>Person：Tie-Yan Liu</title>
        <description>&lt;p&gt;一个理想的研究人员成长轨迹应该是什么样的？  &lt;/p&gt;

&lt;p&gt;微软全球执行副总裁沈向洋博士认为一个酷酷的研究员应该是这样的：“挑选一个雄心勃勃的目标，致力于端到端的研究，长久的坚持，而他的研究伙伴们也应该有着同样的激情，但最重要的是始终乐在其中。”&lt;/p&gt;

&lt;p&gt;如果以这个标准来看，微软亚洲研究院首席研究员&lt;a href=&quot;https://www.microsoft.com/en-us/research/people/tyliu/&quot;&gt;刘铁岩&lt;/a&gt;博士可谓是研究员的范本。2003年，从清华大学电子工程系博士毕业之后，刘铁岩直接进入了微软亚洲研究院，在这一待就是十余年。这十多年间，刘铁岩博士由原本的多媒体信号处理方向的博士，逐步成长为国际机器学习和信息检索领域的知名学者。这些转型在外人看起来十分巨大，但“三清”（本科、硕士和博士都就读于清华大学）出身的刘铁岩博士说：“微软亚洲研究院其实是我的第二所大学，这是一个培养人的地方，有了她的帮助，这一切其实过渡地非常自然。”&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;开放环境带来的首次转型&lt;/h4&gt;

&lt;p&gt;在结束了九年的清华校园学习时，摆在刘铁岩面前的选择有很多，例如知名大学教职等等，而微软亚洲研究院吸引刘铁岩的除了全球领先的研究环境之外，更重要的是可以和自己敬仰已久的顶尖行业大牛一起工作，对于一个刚开始入行的年轻研究员来说无疑动力巨大。因此，刘铁岩于2003年正式加入了微软亚洲研究院，并由原来的多媒体信号处理方向的研究转入了互联网搜索与挖掘领域，从此开始了对信息检索这一全新领域的探索。&lt;/p&gt;

&lt;p&gt;这是刘铁岩在研究院的第一次转型，但这次转型并不像人们想象的那么艰难，因为微软亚洲研究院为研究人员提供了一个十分开放的科研环境，让研究员们有充分的自由和资源来调整自己的研究兴趣。在这里刘铁岩和很多不同研究方向的资深研究员们进行了交流，其中包括他后来的老板，现在的微软亚洲研究院常务副院长&lt;a href=&quot;http://www.msra.cn/zh-cn/about/leadership/wei-ying-ma.aspx&quot;&gt;马维英博士&lt;/a&gt;。同时，借助研究院这个平台刘铁岩还与众多国际知名学者进行了深入交流，进一步拓宽了其科研视野，刘铁岩博士首次转型的领路人便是卡内基梅隆大学的文本分类领域的资深专家杨颐明授。2004年暑假，正处于转型期的刘铁岩博士遇见了前来微软亚洲研究院交流的杨教授，便一拍即合地展开了合作。他们当时共同搭建了当时世界上最大的、近三十万类的文本分类系统，相关论文收到了广泛关注，短短几年间就被引用了数百次。这次和杨教授的合作也成了刘铁岩进入到文本信息处理领域的第一个敲门砖。从那个时候起，刘铁岩开始了解什么是信息检索，什么是文本分类系统，他的首次转型也逐步成型。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;挑选一个雄心勃勃的目标：排序学习&lt;/h4&gt;

&lt;p&gt;第一次转型之后，刘铁岩作为信息检索领域的新人，始终保持着旺盛的好奇心，不断思考着能为这个领域带来哪些新东西。当时围绕搜索引擎所开展的研究十分火热，信息检索更是人们关注的重中之重。通过大量的文献研究，刘铁岩发现这个方向大多数的研究者都是数字图书馆专业背景，因此研究方法都偏向经验化，缺少了对于优化系统方式和目标的科学思考。&lt;/p&gt;

&lt;p&gt;基于对行业的洞察，刘铁岩开始深入学习机器学习的相关知识，并试图把机器学习的思想引入信息检索领域。由此，刘铁岩博士在学术界的第一个成名工作——排序学习（learning to rank）就这样诞生了，该方法为信息检索领域带来了重大变革。&lt;/p&gt;

&lt;p&gt;随后，刘铁岩的研究便围绕排序学习展开。在2007到2008年，刘铁岩和他的团队在SIGIR、WWW、ICML等顶级学术会议上发表了大量的关于排序学习的论文，还在主流会议上做主题讲座、主持专题研讨会。他的表现受到了学术界越来越多的关注，更多的研究人员跟随他进入到这个领域中来，短短的几年时间刘铁岩及其团队的研究实力便在全世界的信息检索领域内遥遥领先。而刘铁岩博士出的第一本学术专著也与排序学习相关。该专著已被多所大学作为教科书、并被其他学者引用了近千次。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;致力于端对端的系统性研究&lt;/h4&gt;

&lt;p&gt;在2008年到2009年左右，排序学习领域尽管很繁荣，但是多数人仍把排序学习作为应用级的研究。在机器学习领域的主流学术会议中，排序学习通常也会被分到应用领域（application track）。&lt;/p&gt;

&lt;p&gt;刘铁岩很快就发现了这其中的原因：一个研究领域如果缺少科研理论的话，是无法被广泛认可的。因此在后来的几年时间里，刘铁岩和他的研究团队花费了大量时间从理论的角度把排序学习领域正式化，去阐述这个领域是什么、目标是什么、各种算法的关系是什么、有什么样的理论性质等等。他们在ICML、NIPS、COLT等顶级机器学习会议上发表了大量排序学习的理论文章，即使到今天这些论文的影响力也十分深刻。在这整个的研究周期内，刘铁岩及其团队把排序学习打造成一个完整的研究领域，并通过从算法到理论的一系列研究成果，让这个领域真正的火了起来，刘铁岩也成了这一研究领域当之无愧的代表人物。&lt;/p&gt;

&lt;p&gt;这就是微软亚洲研究院里一个典型的研究案例。刘铁岩在微软内部的导师Rakesh Agrawal院士曾告诉他：“对于研究人员来说，并不是为了发表论文而发论文，而是要在特定的历史阶段，针对一个重要的问题，从表面到核心全部做到位。”一直到今天，排序学习一直都是很多会议的主要方向之一，仍然有很多学者在进行研究。正是因为这些工作，刘铁岩博士完成了他的第二次转型——由信息检索转变到了机器学习。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;第三次转型：博弈机器学习&lt;/h4&gt;

&lt;p&gt;在微软亚洲研究院，研究员的研究成果除了作为论文发表出来之外，还会应用到微软的各个产品中。通过与产品部门合作，研究员们可以发现实际应用中的新问题。刘铁岩团队与微软的在线广告部门的合作就是其中一个非常有代表性的实例。&lt;/p&gt;

&lt;p&gt;这项合作始于排序学习，刘铁岩和团队成员帮微软广告部门离线训练了一个效果极佳的机器学习模型用于必应广告搜索中的竞价排名。上线之初模型立刻带来了很大的效益，但随着时间的推移，广告效益却大打折扣。刘铁岩和他的团队发现了这个问题，并找到了奇怪现象的根源：广告竞价排名过程常常涉及到人（广告主）的因素，广告主会因为算法的改变带来的价格变化，敏锐地调整自己的广告投放策略，这是一个动态过程。如果不考虑经济规律和人的动态策略，离线地进行机器学习模型的训练，结果自然会产生很大的偏差。&lt;/p&gt;

&lt;p&gt;如果想把广告竞价这个动态问题解释清楚，仅有机器学习的知识背景显然是不够的。所以刘铁岩便带领其团队开始学习博弈论，计算经济学等等，组名也改成了“互联网经济研究组”，这便是他第三次转型的开始。在这个转型过程中，他发明了一种全新的技术，称为“博弈机器学习”，把博弈论的思想引入到机器学习的过程中，来对人的动态策略进行建模，从而解决上文提到的难题。&lt;/p&gt;

&lt;p&gt;如果你了解博弈论和机器学习分别是什么的话，就会发现这两个领域差别巨大，完全是不同的体系，那么这次转型的难度也可想而知。刘铁岩博士说：“对于任何一位研究人员，如果不是在微软亚洲研究院的话，这种转型都是非常困难的。因为，如果你开始学习新东西，想要有这个领域的人认识、认可你，并产生顶级的影响力是十分艰难的。但当我们真正去做的时候，发现微软亚洲研究院给了我们很多帮助，这让我们对新领域的研究变得轻松不少。”当刘铁岩和他们组的研究员们开始涉足互联网经济领域时，不仅有来自微软其他研究院在博弈论领域颇有建树的同事（如Noam Nisan）的帮助、也有很多来自学界的博弈论专家（如邓小铁教授、叶荫宇教授等）抛出了橄榄枝。他们互相访问，一起参加各种学术活动，互相交流，在很短的时间内，刘铁岩他们就对博弈论这一研究方向有了很多深刻的认识：不仅在算法博弈论领域的顶级会议上发表了多篇论文，还在互联网经济研究组成立不到两年的时间里，以程序委员会主席的身份把全世界第二的算法博弈论会议——互联网经济大会（WINE）带到中国。&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;黄金三镖客：电子，计算机和数学&lt;/h4&gt;

&lt;p&gt;三次转型，成就了刘铁岩博士一路创新不断的探索和发现，然而这背后也离不开其整个研究团队的支持与努力。现在，刘铁岩博士带领的团队更名为“人工智能组”，继续在当下火热的机器学习和人工智能领域进行深耕。不久前，微软亚洲研究院&lt;a href=&quot;http://blog.sina.com.cn/s/blog_4caedc7a0102w04g.html&quot;&gt;对外开源的DMTK（分布式机器学习工具包）&lt;/a&gt;便是这个小组的研究成果。&lt;/p&gt;

&lt;p&gt;如果给这个研究组寻找一个关键词的话，那一定是“求知欲”。从刘铁岩的三次转型中也不难发现，现名为人工智能组的研究员们绝非循规蹈矩之人，他们有着强烈的求知欲，就像初生牛犊不怕虎一样，知难而进，什么不会学什么，什么难做什么，朝气十足。&lt;/p&gt;

&lt;p&gt;而另一方面，该团队的组合十分有趣，就像微软亚洲研究院的一个小小缩影一样。研究员们的专业覆盖面既不是全部精钻于机器学习，也不是全部埋头在博弈论上。目前，人工智能组有三分之一的研究员出自数学系，专业包括计算数学、概率论和组合数学，这涵盖了该团队所需要的所有数学基础。另外三分之一的研究员，包括刘铁岩在内都是来自电子工程专业，刘铁岩博士认为，电子工程专业出身的人有一个很大的优点便是有着非常好的直觉，并且不局限自己的思路，十分开放。而其余三分之一的研究员则是计算机专业出身，他们都拥有很强的计算机技能。当数学、电子和计算机三拨精英碰撞在一起的时候，就没有什么研究方向能难得住他们了。&lt;/p&gt;

&lt;p&gt;此外，人工智能组还是一个十分重视学术和工程实践相结合的团队。他们的很多启发与灵感都来自于与微软产品部门的合作，因此，这是一个不断提出新问题的团队。在人工智能组发表的论文中你可以看到一个很明显的特点：团队很少循规蹈矩地解决别人提出的问题，而是经常提出新的问题，并给出一个力所能及范围内的最优解。这样的论文常常有很高的引用数，平均下来，刘铁岩和他的团队发表的论文几乎每篇都有上百次的引用。&lt;/p&gt;

&lt;p&gt;三次转型带来了如今人工智能研究组的团队凝聚力。一加一大于二，小组的很多论文都有至少一个电子，一个计算机和一个数学背景的研究员参与，这样的论文都非常有特点，也能满足各种要求，无论是定力证明、直觉、还是实现的精巧，都可圈可点。&lt;/p&gt;

&lt;p&gt;#### “争吵文化”与“真理不辨不明”&lt;/p&gt;

&lt;p&gt;刘铁岩博士带领的人工智能组还有一个十分有趣的“争吵文化”。在接受采访时，笔者对刘铁岩博士嘴里说出的“争吵文化”感到十分难以置信。坐在对面的刘铁岩博士穿着经典款的男士衬衫，外套一件淡灰色的羊毛开衫，学院气息浓厚，让人似乎很难将他与“争吵”联系在一起。&lt;/p&gt;

&lt;p&gt;“我们团队几乎会天天争吵。”刘铁岩博士笑言。但这其实是研究组最有活力的状态，开会的时候，大家不会在乎职位高低，就一个问题会针锋相对地表达自己的观点。人工智能组全组上下都坚持的一个信条是&lt;strong&gt;“真理不辨不明”&lt;/strong&gt;。在刘铁岩的带领下，整个组会相互批判的看问题，就连待久一点的实习生也会自然的融入其中，和他的导师间也是一种互相辩论，互相学习的关系。&lt;/p&gt;

&lt;p&gt;因此，对于实习生来说，进入微软亚洲研究院会带来巨大的成长。首先是知识的积累，很多实习生在进研究院之初知识非常有限。但微软亚洲研究院计算机专家资源密集，超过两百名的计算机专家们的研究经历、方向和视角各不相同，向他们学习一定会有所收获。其次，实习生们在这里学会的更多是研究经验和研究方法，“争吵文化”在这里便得到了很好的体现。无论是什么大牛发了什么论文，都应该抱有一种“破坏性”的思想，先客观地分析，从中立甚至批判的视角来研究。因此，人工智能组培养出的实习生也都个性十足，颇有“小牛”风范，从不盲目崇拜。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;在微软亚洲研究院大学：成长于中国，却能影响世界&lt;/h4&gt;

&lt;p&gt;作为三清毕业的博士、微软亚洲研究院首席研究员，刘铁岩博士的研究之路始终都未离开中国本土。而作为国际机器学习和信息检索领域的知名学者，他的国际影响力也毋庸置疑。刘铁岩的论文多次获得最佳论文奖、最高引用论文奖；他担任了SIGIR、WWW、NIPS、AAAI等众多顶级学术会议的程序委员会主席或领域主席，ACM信息系统会刊（TOIS）、ACM万维网会刊（TWEB）等主流学术期刊的副主编；他和他的研究成果也被美国国家公共电台、中国中央电视台、MIT技术评论等国内外知名媒体所报道。此外，他还受邀在包括卡内基梅隆大学（CMU）、诺丁汉大学在内的国内外知名高校担任客座教授、博士生导师。对于所获得的诸多成就，刘铁岩无不感动地说：“最重要的原因其实是我来自微软亚洲研究院，如果我博士毕业没有来到研究院，我都不敢想象会有今天的影响力。”&lt;/p&gt;

&lt;p&gt;微软亚洲研究院从1998年11月成立的第一天开始，就在国际学术界扮演着举足轻重的作用。这么多年来，研究院以一贯开放的心态，与学术界展开积极的合作，而研究院开放的学术环境也为研究人员们构建了一座与学术界的桥梁，两者相辅相成。甚至有国外学者戏称微软亚洲研究院是一个让人“又爱又恨”的机构。爱在它的研究成果，为学术界带来了诸多创新，也“恨”在其彪悍的实力，让别人望尘莫及。&lt;/p&gt;

&lt;p&gt;除了学术合作，微软亚洲研究院为研究员们还提供了接触用户，服务用户的可能。微软亚洲研究院的研究员也和微软的产品部分积极展开合作。刘铁岩博士带领的人工智能组的技术转化也体现在微软必应搜索的搜索结果排序和广告排序，小冰的自动问答技术等微软的产品和服务中。&lt;/p&gt;

&lt;p&gt;刘铁岩博士谦虚的表示，“能成为包括CMU在内的众多知名高校的客座教授，很大程度源于学术界对微软亚洲研究院的信任。甚至人工智能组的实习生，也成为了CMU的offer收割机，这都得益于我们开放的科研环境和紧密的学术交流。因为微软亚洲研究院，我们的研究被更多人关注，我们的新人也被更多人认可，这就形成了一个良性循环。类似于国外的师承关系，从这个角度来看，微软亚洲研究院着实就像是一所大学了。”&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;著作权声明&lt;/h4&gt;

&lt;p&gt;本文转自&lt;a href=&quot;http://blog.sina.com.cn/msra&quot;&gt;微软亚洲研究院的博客&lt;/a&gt; &lt;a href=&quot;http://blog.sina.com.cn/s/blog_4caedc7a0102w57s.html/&quot;&gt;刘铁岩：在微软大学的三次华丽转型&lt;/a&gt; 
转载请保留以上链接&lt;/p&gt;
</description>
        <pubDate>2016-07-16 00:00:00 +0800</pubDate>
        <link>https://zhengb087.github.io/bamboo-college/2016/07/16/Tieyan-Liu/</link>
        <guid isPermaLink="true">https://zhengb087.github.io/bamboo-college/2016/07/16/Tieyan-Liu/</guid>
        
        <category>人物</category>
        
        <category>讲师</category>
        
        <category>人工智能</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Bamboo College</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Bamboo College 的 Blog 就这么开通了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2015 年，Hux 总算有个地方可以好好写点东西了。&lt;/p&gt;

&lt;p&gt;作为一个程序员， Blog 这种轮子要是挂在大众博客程序上就太没意思了。一是觉得大部分 Blog 服务都太丑，二是觉得不能随便定制不好玩。之前因为太懒没有折腾，结果就一直连个写 Blog 的地儿都没有。&lt;/p&gt;

&lt;p&gt;在玩了一段时间知乎之后，答题的快感又激起了我开博客的冲动。之前的&lt;a href=&quot;http://huangxuan.me/portfolio&quot;&gt;个人网站&lt;/a&gt;是作品集形式的（现在集成进来了），并不适合用来写博文，一不做二不休，花一天搞一个吧！&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;接下来说说搭建这个博客的技术细节。  &lt;/p&gt;

&lt;p&gt;正好之前就有关注过 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案，非常轻松时尚。&lt;/p&gt;

&lt;p&gt;其优点非常明显：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 带来的优雅写作体验&lt;/li&gt;
  &lt;li&gt;非常熟悉的 Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
    &lt;ul&gt;
      &lt;li&gt;如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jekyll 的自定制非常容易，基本就是个模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本来觉得最大的缺点可能是 GitHub 在国内访问起来太慢，所以第二天一起床就到 GitCafe(Chinese GitHub Copy) 迁移了一个&lt;a href=&quot;http://huxpro.gitcafe.io&quot;&gt;镜像&lt;/a&gt;出来，结果还是巨慢。&lt;/p&gt;

&lt;p&gt;哥哥可是个前端好嘛！ 果断开 Chrome DevTool 查了下网络请求，原来是 &lt;strong&gt;pending 在了 Google Fonts&lt;/strong&gt; 上，页面渲染一直被阻塞到请求超时为止，难怪这么慢。&lt;br /&gt;
忍痛割爱，只好把 Web Fonts 去了（反正超时看到的也只能是 fallback ），果然一下就正常了，而且 GitHub 和 GitCafe 对比并没有感受到明显的速度差异，虽然 github 的 ping 值明显要高一些，达到了 300ms，于是用 DNSPOD 优化了一下速度。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;配置的过程中也没遇到什么坑，基本就是 Git 的流程，相当顺手&lt;/p&gt;

&lt;p&gt;大的 Jekyll 主题上直接 fork 了 Clean Blog（这个主题也相当有名，就不多赘述了。唯一的缺点大概就是没有标签支持，于是我给它补上了。）&lt;/p&gt;

&lt;p&gt;本地调试环境需要 &lt;code&gt;gem install jekyll&lt;/code&gt;，结果 rubygem 的源居然被墙了……后来手动改成了我大淘宝的镜像源才成功&lt;/p&gt;

&lt;p&gt;Theme 的 CSS 是基于 Bootstrap 定制的，看得不爽的地方直接在 Less 里改就好了（平时更习惯 SCSS 些），&lt;strong&gt;不过其实我一直觉得 Bootstrap 在移动端的体验做得相当一般，比我在淘宝参与的团队 CSS 框架差多了……&lt;/strong&gt;所以为了体验，也补了不少 CSS 进去&lt;/p&gt;

&lt;p&gt;最后就进入了耗时反而最长的&lt;strong&gt;做图、写字&lt;/strong&gt;阶段，也算是进入了&lt;strong&gt;写博客&lt;/strong&gt;的正轨，因为是类似 Hack Day 的方式去搭这个站的，所以折腾折腾着大半夜就过去了。&lt;/p&gt;

&lt;p&gt;第二天考虑中文字体的渲染，fork 了 &lt;a href=&quot;http://www.typeisbeautiful.com/&quot;&gt;Type is Beautiful&lt;/a&gt; 的 &lt;code&gt;font&lt;/code&gt; CSS，调整了字号，适配了 Win 的渣渲染，中英文混排效果好多了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;回顾这个博客的诞生，纯粹是出于个人兴趣。在知乎相关问题上回答并获得一定的 star 后，我决定把这个博客主题当作一个小小的开源项目来维护。&lt;/p&gt;

&lt;p&gt;在经历 v1.0 - v1.5 的蜕变后，这个博客主题愈发完整，不但增加了诸多 UI 层的优化（opinionated）；在代码层面，更加丰富的配置项也使得这个主题拥有了更好的灵活性与可拓展性。而作为一个开源项目，我也积极的为其完善文档与解决 issue。&lt;/p&gt;

&lt;p&gt;如果你恰好逛到了这里，希望你也能喜欢这个博客主题。&lt;/p&gt;

&lt;p&gt;—— Bamboo 后记于 2016.07&lt;/p&gt;
</description>
        <pubDate>2016-07-15 20:00:00 +0800</pubDate>
        <link>https://zhengb087.github.io/bamboo-college/2016/07/15/hello-2016/</link>
        <guid isPermaLink="true">https://zhengb087.github.io/bamboo-college/2016/07/15/hello-2016/</guid>
        
        <category>讲师</category>
        
        <category>招聘</category>
        
        
      </item>
    
      <item>
        <title>Example Post</title>
        <description>&lt;p&gt;JavaScript 有着很奇怪的命名史。&lt;/p&gt;

&lt;p&gt;1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript &lt;em&gt;（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/post-js-version/javascript-java.jpg&quot; alt=&quot;java-javascript&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;歪果仁的笑话怎么一点都不好笑&lt;/small&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;译者注：&lt;a href=&quot;https://en.wikipedia.org/wiki/JavaScript#History&quot;&gt;wikipedia 的 JavaScript 词条&lt;/a&gt; 更详细的叙述了这段历史&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1996 年，网景将 JavaScript 提交给 &lt;a href=&quot;http://www.ecma-international.org/&quot;&gt;ECMA International（欧洲计算机制造商协会）&lt;/a&gt; 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;术语（译者注）：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;标准（Standard）&lt;/em&gt;： 用于定义与其他事物区别的一套规则&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;实现（Implementation）&lt;/em&gt;： 某个标准的具体实施/真实实践&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;译者注：&lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29&quot;&gt;ECMAScript 第四版草案&lt;/a&gt;由于太过激进而被抛弃，Adobe 的 &lt;a href=&quot;https://en.wikipedia.org/wiki/ActionScript&quot;&gt;ActionScript 3.0&lt;/a&gt; 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）&lt;/p&gt;

&lt;p&gt;目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 &lt;a href=&quot;https://github.com/wycats/javascript-decorators&quot;&gt;decorators（装饰者）&lt;/a&gt;，&lt;a href=&quot;https://github.com/lukehoban/ecmascript-asyncawait&quot;&gt;async-await（async-await 异步编程模型）&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/jeffmo/es-class-properties&quot;&gt;static class properties（静态类属性）&lt;/a&gt;。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 &lt;a href=&quot;https://babeljs.io/docs/usage/experimental/&quot;&gt;Babel 的官网&lt;/a&gt; 上查看各个提案目前都在哪个阶段了。&lt;/p&gt;

&lt;p&gt;所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ECMAScript&lt;/strong&gt;：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ECMAScript 5 (ES5)&lt;/strong&gt;：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)&lt;/strong&gt;：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅&lt;a href=&quot;http://kangax.github.io/compat-table/es6/&quot;&gt;这张兼容性表&lt;/a&gt;来查看不同浏览器和工具的实现情况。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ECMAScript 2016&lt;/strong&gt;：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ECMAScript Proposals&lt;/strong&gt;：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;一些资源&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;TC39 的 &lt;a href=&quot;https://github.com/tc39/ecma262&quot;&gt;Github 仓库&lt;/a&gt;上可以看到所有目前公开的提案&lt;/li&gt;
  &lt;li&gt;如果你还不熟悉 ES6，Babel 有一个&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;很不错的特性概览&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 &lt;a href=&quot;http://exploringjs.com/&quot;&gt;Exploring ES6&lt;/a&gt;和 Nicholas Zakas 的 &lt;a href=&quot;https://leanpub.com/understandinges6&quot;&gt;Understanding ECMAScript 6&lt;/a&gt;。Axel 的博客 &lt;a href=&quot;http://www.2ality.com/&quot;&gt;2ality&lt;/a&gt; 也是很不错的 ES6 资源&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&quot;shadow&quot; width=&quot;320&quot; src=&quot;/img/in-post/post-js-version/keep-calm-and-learn-javascript.png&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;来学 JavaScript 吧！&lt;/small&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;著作权声明&lt;/h4&gt;

&lt;p&gt;本文译自 &lt;a href=&quot;http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/&quot;&gt;ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?&lt;/a&gt; &lt;br /&gt;
译者 &lt;a href=&quot;http://weibo.com/huxpro&quot;&gt;黄玄&lt;/a&gt;，首次发布于 &lt;a href=&quot;http://huangxuan.me&quot;&gt;Hux Blog&lt;/a&gt;，转载请保留以上链接&lt;/p&gt;
</description>
        <pubDate>2015-09-22 00:00:00 +0800</pubDate>
        <link>https://zhengb087.github.io/bamboo-college/2015/09/22/js-version/</link>
        <guid isPermaLink="true">https://zhengb087.github.io/bamboo-college/2015/09/22/js-version/</guid>
        
        <category>讲师</category>
        
        <category>JavaScript</category>
        
        <category>大数据</category>
        
        
      </item>
    
  </channel>
</rss>
